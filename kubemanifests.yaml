apiVersion: v1
items:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: api
      name: api
    spec:
      ports:
        - name: "8000"
          port: 8000
          targetPort: 8000
      type: LoadBalancer
      selector:
        io.kompose.service: api
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: broker-rabbitmq
      name: broker-rabbitmq
    spec:
      ports:
        - name: "15672"
          port: 15672
          targetPort: 15672
      selector:
        io.kompose.service: broker-rabbitmq
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: celery-flower
      name: celery-flower
    spec:
      ports:
        - name: "5555"
          port: 5555
          targetPort: 5555
      selector:
        io.kompose.service: celery-flower
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: api
      name: api
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: api
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
            kompose.version: 1.26.0 (40646f47)
          creationTimestamp: null
          labels:
            io.kompose.service: api
        spec:
          containers:
            - env:
                - name: APP_ENV
                  value: Dev
              image: api:0.0.1
              imagePullPolicy: Never
              name: api
              ports:
                - containerPort: 8000
              resources: {}
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: api-beat
      name: api-beat
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: api-beat
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
            kompose.version: 1.26.0 (40646f47)
          creationTimestamp: null
          labels:
            io.kompose.service: api-beat
        spec:
          containers:
            - args:
                - celery
                - -A
                - tasks.celery
                - beat
                - --loglevel=info
              env:
                - name: APP_ENV
                  value: Dev
              image: api-beat:0.0.1
              imagePullPolicy: Never
              name: api-beat
              resources: {}
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: api-worker01
      name: api-worker01
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: api-worker01
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
            kompose.version: 1.26.0 (40646f47)
          creationTimestamp: null
          labels:
            io.kompose.service: api-worker01
        spec:
          containers:
            - args:
                - celery
                - -A
                - tasks.celery
                - worker
                - --loglevel=info
              env:
                - name: APP_ENV
                  value: Dev
              image: api-worker01:0.0.1
              imagePullPolicy: Never
              name: api-worker01
              resources: {}
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: api-worker02
      name: api-worker02
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: api-worker02
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
            kompose.version: 1.26.0 (40646f47)
          creationTimestamp: null
          labels:
            io.kompose.service: api-worker02
        spec:
          containers:
            - args:
                - celery
                - -A
                - tasks.celery
                - worker
                - --loglevel=info
              env:
                - name: APP_ENV
                  value: Dev
              image: api-worker02:0.0.1
              imagePullPolicy: Never
              name: api-worker02
              resources: {}
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: broker-rabbitmq
      name: broker-rabbitmq
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: broker-rabbitmq
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
            kompose.version: 1.26.0 (40646f47)
          creationTimestamp: null
          labels:
            io.kompose.service: broker-rabbitmq
        spec:
          containers:
            - env:
                - name: RABBITMQ_DEFAULT_PASS
                  value: rabbit_password
                - name: RABBITMQ_DEFAULT_USER
                  value: rabbit_user
              image: rabbitmq:3.9.13-management
              name: broker-rabbitmq
              ports:
                - containerPort: 15672
              resources: {}
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: celery-flower
      name: celery-flower
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: celery-flower
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
            kompose.version: 1.26.0 (40646f47)
          creationTimestamp: null
          labels:
            io.kompose.service: celery-flower
        spec:
          containers:
            - env:
                - name: AMQP_ADMIN_HOST
                  value: broker-rabbitmq
                - name: AMQP_ADMIN_PASSWORD
                  value: rabbit_password
                - name: AMQP_ADMIN_PORT
                  value: "15672"
                - name: AMQP_ADMIN_USERNAME
                  value: rabbit_user
                - name: AMQP_HOST
                  value: broker-rabbitmq
                - name: AMQP_PASSWORD
                  value: rabbit_password
                - name: AMQP_PORT
                  value: "5672"
                - name: AMQP_USERNAME
                  value: rabbit_user
                - name: FLOWER_BASIC_AUTH
                  value: user:test
              image: gregsi/latest-celery-flower-docker:latest
              name: celery-flower
              ports:
                - containerPort: 5555
              resources: {}
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: db-postgres
      name: db-postgres
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: db-postgres
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
            kompose.version: 1.26.0 (40646f47)
          creationTimestamp: null
          labels:
            io.kompose.service: db-postgres
        spec:
          containers:
            - env:
                - name: POSTGRES_PASSWORD
                  value: db_password
                - name: POSTGRES_USER
                  value: db_user
              image: postgres:11.2
              name: db-postgres
              resources: {}
          restartPolicy: Always
    status: {}
kind: List
metadata: {}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: name-virtual-host-ingress
spec:
  rules:
  - host: localhost
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: api
            port:
              number: 8000